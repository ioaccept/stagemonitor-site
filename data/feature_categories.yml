- id: analyze-requests
  name: Analyze Requests
  description: Stagemonitor includes a <a href="http://www.elasticsearch.org/overview/kibana/">Kibana</a>
    dashboard that can be used to get detailed information about incoming
    requests. You don't need to set up logstash or parse any logs for that.
  icon: fa-tachometer
  features:
    - name: Powerful querying and filtering capabilities
      description: Filter requests by queries or by selecting charts. You could use the query section to get details
        about requests that caused errors or where slow.
      image: images/stagemonitor-kibana-filter.png
    - name: Detailed Request Traces
      description: In this section, you can find out about the root cause of slow or failed requests by analyzing their
        stack traces, request headers as well as information about the user's login name, ip, browser and operating system. <br>
        You can even analyze the method call tree including sql statements and parameters, that is collected by
        stagemonitor's low overhead profiler.
      image: images/stagemonitor-kibana-details.png
- id: grafana-dashboards
  name: Grafana Dashboards
  description: The stagemonitor monitoring agent tightly integrates with the timeseries backend
    <a href="http://graphite.readthedocs.org/en/latest/overview.html">Graphite</a> to store a
    long history of datapoints without overwhelming your disk and its dashboard extension
    <a href="http://grafana.org/">Grafana</a> to analyze graphed metrics.
    Stagemonitor includes preconfigured Grafana dashboards that can be customized. <br><br>
    To support clustered environments, you can select the application, instance and host in each dashboard.
    If you don't select a instance and a host, you get aggregated metrics.<br><br>
    Stagemonitor includes the awesome <a href="http://metrics.codahale.com/">Metrics</a> library. You can use it to
    track additional metrics - either programmatically or declaratively by adding annotations.
  icon: fa-bar-chart-o
  features:
    - name: Request Dashboard
      description: The request dashboard gives you information about the statistical distribution of your page response
        times, the througput and error rate. You can also easily identify the requests with the highest response time,
        throughput and error rate.
        Requests are grouped by use cases. Usecases are automatically detected if you use Spring MVC. For other
        technologies, you can group URLs by regular expressions.
      image: images/dashboard-request.png
    - name: JVM Dashboards
      description: Get information about the heap utilisation, garbage collection behaviour and CPU utilisation.
      image: images/dashboard-memory.png
    - name: EhCache Metrics
      description: Information about the hit-rate, cache size (in bytes), get performance, throughput and expiries of
        all caches.
      image: images/dashboard-ehcache.png
    - name: Metrics about logging
      description: Statistics about the frequency of logs. Optionally append the request-id, application name, instance
        name and host name to each log statement to easily filter relevant logs.<br> Optinally, you can enable a aspect,
        that appends the application name, instance name, host name and the request id to each log line. So that if you
        are sending your logs to a central backend (e.g. with logstash elasticsearch and kibana), you can easily filter
        relevant log stagements.
      image: images/dashboard-logging.png
    - name: Server Metrics
      description: Graphs that show the Server Thread Pool usage, the number of concurrent sessions, the load of your
        hosts and the number of online servers. You can group these metrics by instance of host.
      image: images/dashboard-server.png